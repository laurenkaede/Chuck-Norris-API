{"version":3,"sources":["chucknorris.png","tumbleweed.gif","components/ChuckGif.js","components/Spinner.js","components/ChuckImg.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ChuckGif","src","LoadingChuck","alt","Spinner","LoadingGif","ChuckImg","props","loading","data","App","state","jokes","componentDidMount","a","setState","axios","get","response","value","this","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8GAAAA,EAAOC,QAAU,IAA0B,yC,mBCA3CD,EAAOC,QAAU,IAA0B,wC,oQCY5BC,EARE,WACb,OACI,6BACI,yBAAKC,IAAKC,IAAcC,IAAI,mB,iBCIzBC,EAPC,WACZ,OACI,6BACI,yBAAKH,IAAKI,IAAYF,IAAI,iBCWvBG,EAdE,SAACC,GAEd,OAAIA,EAAMC,QACC,kBAAC,EAAD,MAGH,6BACI,kBAAC,EAAD,MACCD,EAAME,OC4BRC,E,4MAhCbC,MAAQ,CACNC,MAAO,GACPJ,SAAS,G,EAGXK,kB,sBAAoB,4BAAAC,EAAA,6DAClB,EAAKC,SAAS,CACZP,SAAS,IAFO,SAKKQ,IAAMC,IAC3B,2CANgB,OAKZC,EALY,OASlB,EAAKH,SAAS,CACZH,MAAOM,EAAST,KAAKU,MACrBX,SAAS,IAXO,2C,uDAgBlB,OACE,6BACE,2DACA,kBAAC,EAAD,CAAUA,QAASY,KAAKT,MAAMH,UAC9B,4BAAQa,QAASD,KAAKP,mBAAtB,eACA,4BAAKO,KAAKT,MAAMC,Y,GA5BNU,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAEL,kBAAC,EAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.29d4a45d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/chucknorris.0607b2e8.png\";","module.exports = __webpack_public_path__ + \"static/media/tumbleweed.44a5a282.gif\";","import React from 'react';\nimport LoadingChuck from '../chucknorris.png';\n\n\nconst ChuckGif = () => {\n    return (\n        <div>\n            <img src={LoadingChuck} alt=\"Chuck Norris\" />\n        </div>\n    )\n};\n\nexport default ChuckGif;\n","import React from 'react';\nimport LoadingGif from '../tumbleweed.gif';\n\n\nconst Spinner = () => {\n    return (\n        <div>\n            <img src={LoadingGif} alt=\"Loading...\" />\n        </div>\n    )\n};\nexport default Spinner;\n","import React from 'react';\nimport ChuckGif from './ChuckGif.js';\nimport Spinner from './Spinner.js';\n\nconst ChuckImg = (props) => {\n\n    if (props.loading) {\n        return <Spinner />\n    } else {\n        return (\n            <div>\n                <ChuckGif />\n                {props.data}\n            </div>\n            )\n        }\n    };\n\nexport default ChuckImg;\n","import React from 'react';\nimport './App.css';\nimport axios from \"axios\";\nimport ChuckImg from \"./components/ChuckImg\";\n\n\nclass App extends React.Component {\n\n  state = {\n    jokes: [],\n    loading: false\n  };\n\n  componentDidMount = async () => {\n    this.setState({\n      loading: true\n    });\n  \n    const response = await axios.get(\n      \"https://api.chucknorris.io/jokes/random\"\n    );\n\n    this.setState({\n      jokes: response.data.value,\n      loading: false\n    });\n  }\n\n  render () {\n    return (\n      <div>\n        <h1> Random Chuck Norris Jokes </h1>\n        <ChuckImg loading={this.state.loading} />\n        <button onClick={this.componentDidMount}>Random Joke</button>\n        <h2>{this.state.jokes}</h2>\n      </div>\n    );\n  }\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  \n    <App />,\n    \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}